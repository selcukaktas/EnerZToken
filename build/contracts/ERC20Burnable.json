{
  "contractName": "ERC20Burnable",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "_totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": "0x608060405234801561001057600080fd5b5061082c806100206000396000f3fe6080604052600436106100ae5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663095ea7b381146100b357806318160ddd1461010057806323b872dd14610127578063395093511461016a5780633eaaf86b146101a357806342966c68146101b857806370a08231146101e457806379cc679014610217578063a457c2d714610250578063a9059cbb14610289578063dd62ed3e146102c2575b600080fd5b3480156100bf57600080fd5b506100ec600480360360408110156100d657600080fd5b50600160a060020a0381351690602001356102fd565b604080519115158252519081900360200190f35b34801561010c57600080fd5b50610115610369565b60408051918252519081900360200190f35b34801561013357600080fd5b506100ec6004803603606081101561014a57600080fd5b50600160a060020a0381358116916020810135909116906040013561036f565b34801561017657600080fd5b506100ec6004803603604081101561018d57600080fd5b50600160a060020a038135169060200135610426565b3480156101af57600080fd5b506101156104c4565b3480156101c457600080fd5b506101e2600480360360208110156101db57600080fd5b50356104ca565b005b3480156101f057600080fd5b506101156004803603602081101561020757600080fd5b5035600160a060020a03166104d7565b34801561022357600080fd5b506101e26004803603604081101561023a57600080fd5b50600160a060020a0381351690602001356104f2565b34801561025c57600080fd5b506100ec6004803603604081101561027357600080fd5b50600160a060020a038135169060200135610500565b34801561029557600080fd5b506100ec600480360360408110156102ac57600080fd5b50600160a060020a03813516906020013561054b565b3480156102ce57600080fd5b50610115600480360360408110156102e557600080fd5b50600160a060020a0381358116916020013516610561565b6000600160a060020a038316151561031457600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293926000805160206107e1833981519152929181900390910190a350600192915050565b60025490565b600160a060020a03831660009081526001602090815260408083203384529091528120546103a3908363ffffffff61058c16565b600160a060020a03851660009081526001602090815260408083203384529091529020556103d28484846105a1565b600160a060020a0384166000818152600160209081526040808320338085529083529281902054815190815290519293926000805160206107e1833981519152929181900390910190a35060019392505050565b6000600160a060020a038316151561043d57600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610471908363ffffffff61066e16565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191936000805160206107e1833981519152929081900390910190a350600192915050565b60025481565b6104d43382610687565b50565b600160a060020a031660009081526020819052604090205490565b6104fc8282610730565b5050565b6000600160a060020a038316151561051757600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610471908363ffffffff61058c16565b60006105583384846105a1565b50600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b60008282111561059b57600080fd5b50900390565b600160a060020a03821615156105b657600080fd5b600160a060020a0383166000908152602081905260409020546105df908263ffffffff61058c16565b600160a060020a038085166000908152602081905260408082209390935590841681522054610614908263ffffffff61066e16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282018381101561068057600080fd5b9392505050565b600160a060020a038216151561069c57600080fd5b6002546106af908263ffffffff61058c16565b600255600160a060020a0382166000908152602081905260409020546106db908263ffffffff61058c16565b600160a060020a038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b600160a060020a0382166000908152600160209081526040808320338452909152902054610764908263ffffffff61058c16565b600160a060020a03831660009081526001602090815260408083203384529091529020556107928282610687565b600160a060020a0382166000818152600160209081526040808320338085529083529281902054815190815290519293926000805160206107e1833981519152929181900390910190a3505056fe8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a723058206a4f6d4e533e5aecb4e25487f4062d7a3ae6650a066c1f11c69c8f04051d65180029",
  "deployedBytecode": "0x6080604052600436106100ae5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663095ea7b381146100b357806318160ddd1461010057806323b872dd14610127578063395093511461016a5780633eaaf86b146101a357806342966c68146101b857806370a08231146101e457806379cc679014610217578063a457c2d714610250578063a9059cbb14610289578063dd62ed3e146102c2575b600080fd5b3480156100bf57600080fd5b506100ec600480360360408110156100d657600080fd5b50600160a060020a0381351690602001356102fd565b604080519115158252519081900360200190f35b34801561010c57600080fd5b50610115610369565b60408051918252519081900360200190f35b34801561013357600080fd5b506100ec6004803603606081101561014a57600080fd5b50600160a060020a0381358116916020810135909116906040013561036f565b34801561017657600080fd5b506100ec6004803603604081101561018d57600080fd5b50600160a060020a038135169060200135610426565b3480156101af57600080fd5b506101156104c4565b3480156101c457600080fd5b506101e2600480360360208110156101db57600080fd5b50356104ca565b005b3480156101f057600080fd5b506101156004803603602081101561020757600080fd5b5035600160a060020a03166104d7565b34801561022357600080fd5b506101e26004803603604081101561023a57600080fd5b50600160a060020a0381351690602001356104f2565b34801561025c57600080fd5b506100ec6004803603604081101561027357600080fd5b50600160a060020a038135169060200135610500565b34801561029557600080fd5b506100ec600480360360408110156102ac57600080fd5b50600160a060020a03813516906020013561054b565b3480156102ce57600080fd5b50610115600480360360408110156102e557600080fd5b50600160a060020a0381358116916020013516610561565b6000600160a060020a038316151561031457600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293926000805160206107e1833981519152929181900390910190a350600192915050565b60025490565b600160a060020a03831660009081526001602090815260408083203384529091528120546103a3908363ffffffff61058c16565b600160a060020a03851660009081526001602090815260408083203384529091529020556103d28484846105a1565b600160a060020a0384166000818152600160209081526040808320338085529083529281902054815190815290519293926000805160206107e1833981519152929181900390910190a35060019392505050565b6000600160a060020a038316151561043d57600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610471908363ffffffff61066e16565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191936000805160206107e1833981519152929081900390910190a350600192915050565b60025481565b6104d43382610687565b50565b600160a060020a031660009081526020819052604090205490565b6104fc8282610730565b5050565b6000600160a060020a038316151561051757600080fd5b336000908152600160209081526040808320600160a060020a0387168452909152902054610471908363ffffffff61058c16565b60006105583384846105a1565b50600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b60008282111561059b57600080fd5b50900390565b600160a060020a03821615156105b657600080fd5b600160a060020a0383166000908152602081905260409020546105df908263ffffffff61058c16565b600160a060020a038085166000908152602081905260408082209390935590841681522054610614908263ffffffff61066e16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282018381101561068057600080fd5b9392505050565b600160a060020a038216151561069c57600080fd5b6002546106af908263ffffffff61058c16565b600255600160a060020a0382166000908152602081905260409020546106db908263ffffffff61058c16565b600160a060020a038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b600160a060020a0382166000908152600160209081526040808320338452909152902054610764908263ffffffff61058c16565b600160a060020a03831660009081526001602090815260408083203384529091529020556107928282610687565b600160a060020a0382166000818152600160209081526040808320338085529083529281902054815190815290519293926000805160206107e1833981519152929181900390910190a3505056fe8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a165627a7a723058206a4f6d4e533e5aecb4e25487f4062d7a3ae6650a066c1f11c69c8f04051d65180029",
  "sourceMap": "140:579:8:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;140:579:8;;;;;;;",
  "deployedSourceMap": "140:579:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2734:238:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2734:238:7;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;2734:238:7;;;;;;;;;;;;;;;;;;;;;;;;;;;935:89;;8:9:-1;5:2;;;30:1;27;20:12;5:2;935:89:7;;;;;;;;;;;;;;;;;;;;3435:294;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3435:294:7;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3435:294:7;;;;;;;;;;;;;;;;;;4232:317;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4232:317:7;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;4232:317:7;;;;;;;;;839:27;;8:9:-1;5:2;;;30:1;27;20:12;5:2;839:27:7;;;;295:77:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;295:77:8;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;295:77:8;;;;;1233:104:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1233:104:7;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1233:104:7;-1:-1:-1;;;;;1233:104:7;;;624:93:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;624:93:8;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;624:93:8;;;;;;;;;5057:327:7;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5057:327:7;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;5057:327:7;;;;;;;;;1961:137;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1961:137:7;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1961:137:7;;;;;;;;;1668:129;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1668:129:7;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1668:129:7;;;;;;;;;;;2734:238;2799:4;-1:-1:-1;;;;;2823:21:7;;;;2815:30;;;;;;2865:10;2856:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;2856:29:7;;;;;;;;;;;;:37;;;2908:36;;;;;;;2856:29;;2865:10;-1:-1:-1;;;;;;;;;;;2908:36:7;;;;;;;;;;-1:-1:-1;2961:4:7;2734:238;;;;:::o;935:89::-;1005:12;;935:89;:::o;3435:294::-;-1:-1:-1;;;;;3559:14:7;;3514:4;3559:14;;;:8;:14;;;;;;;;3574:10;3559:26;;;;;;;;:37;;3590:5;3559:37;:30;:37;:::i;:::-;-1:-1:-1;;;;;3530:14:7;;;;;;:8;:14;;;;;;;;3545:10;3530:26;;;;;;;:66;3606:26;3539:4;3622:2;3626:5;3606:9;:26::i;:::-;-1:-1:-1;;;;;3647:54:7;;3674:14;;;;:8;:14;;;;;;;;3662:10;3674:26;;;;;;;;;;;3647:54;;;;;;;3662:10;;3647:54;-1:-1:-1;;;;;;;;;;;3647:54:7;;;;;;;;;;-1:-1:-1;3718:4:7;3435:294;;;;;:::o;4232:317::-;4312:4;-1:-1:-1;;;;;4336:21:7;;;;4328:30;;;;;;4410:10;4401:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4401:29:7;;;;;;;;;;:45;;4435:10;4401:45;:33;:45;:::i;:::-;4378:10;4369:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4369:29:7;;;;;;;;;;;;:77;;;4461:60;;;;;;4369:29;;-1:-1:-1;;;;;;;;;;;4461:60:7;;;;;;;;;;-1:-1:-1;4538:4:7;4232:317;;;;:::o;839:27::-;;;;:::o;295:77:8:-;341:24;347:10;359:5;341;:24::i;:::-;295:77;:::o;1233:104:7:-;-1:-1:-1;;;;;1314:16:7;1288:7;1314:16;;;;;;;;;;;;1233:104::o;624:93:8:-;688:22;698:4;704:5;688:9;:22::i;:::-;624:93;;:::o;5057:327:7:-;5142:4;-1:-1:-1;;;;;5166:21:7;;;;5158:30;;;;;;5240:10;5231:20;;;;:8;:20;;;;;;;;-1:-1:-1;;;;;5231:29:7;;;;;;;;;;:50;;5265:15;5231:50;:33;:50;:::i;1961:137::-;2022:4;2038:32;2048:10;2060:2;2064:5;2038:9;:32::i;:::-;-1:-1:-1;2087:4:7;1961:137;;;;:::o;1668:129::-;-1:-1:-1;;;;;1766:15:7;;;1740:7;1766:15;;;:8;:15;;;;;;;;:24;;;;;;;;;;;;;1668:129::o;1205:145:6:-;1263:7;1290:6;;;;1282:15;;;;;;-1:-1:-1;1319:5:6;;;1205:145::o;5598:256:7:-;-1:-1:-1;;;;;5685:16:7;;;;5677:25;;;;;;-1:-1:-1;;;;;5731:15:7;;:9;:15;;;;;;;;;;;:26;;5751:5;5731:26;:19;:26;:::i;:::-;-1:-1:-1;;;;;5713:15:7;;;:9;:15;;;;;;;;;;;:44;;;;5783:13;;;;;;;:24;;5801:5;5783:24;:17;:24;:::i;:::-;-1:-1:-1;;;;;5767:13:7;;;:9;:13;;;;;;;;;;;;:40;;;;5822:25;;;;;;;5767:13;;5822:25;;;;;;;;;;;;;5598:256;;;:::o;1431:145:6:-;1489:7;1520:5;;;1543:6;;;;1535:15;;;;;;1568:1;1431:145;-1:-1:-1;;;1431:145:6:o;6686:263:7:-;-1:-1:-1;;;;;6760:21:7;;;;6752:30;;;;;;6808:12;;:23;;6825:5;6808:23;:16;:23;:::i;:::-;6793:12;:38;-1:-1:-1;;;;;6862:18:7;;:9;:18;;;;;;;;;;;:29;;6885:5;6862:29;:22;:29;:::i;:::-;-1:-1:-1;;;;;6841:18:7;;:9;:18;;;;;;;;;;;:50;;;;6906:36;;;;;;;6841:9;;6906:36;;;;;;;;;;;6686:263;;:::o;7338:255::-;-1:-1:-1;;;;;7440:17:7;;;;;;:8;:17;;;;;;;;7458:10;7440:29;;;;;;;;:40;;7474:5;7440:40;:33;:40;:::i;:::-;-1:-1:-1;;;;;7408:17:7;;;;;;:8;:17;;;;;;;;7426:10;7408:29;;;;;;;:72;7490:21;7417:7;7505:5;7490;:21::i;:::-;-1:-1:-1;;;;;7526:60:7;;7556:17;;;;:8;:17;;;;;;;;7544:10;7556:29;;;;;;;;;;;7526:60;;;;;;;7544:10;;7526:60;-1:-1:-1;;;;;;;;;;;7526:60:7;;;;;;;;;;7338:255;;:::o",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./ERC20.sol\";\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The amount of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n",
  "sourcePath": "D:\\code\\enerZToken\\node_modules\\openzeppelin-solidity\\contracts\\token\\ERC20\\ERC20Burnable.sol",
  "ast": {
    "absolutePath": "/D/code/enerZToken/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol",
    "exportedSymbols": {
      "ERC20Burnable": [
        1079
      ]
    },
    "id": 1080,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1050,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:8"
      },
      {
        "absolutePath": "/D/code/enerZToken/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "file": "./ERC20.sol",
        "id": 1051,
        "nodeType": "ImportDirective",
        "scope": 1080,
        "sourceUnit": 1049,
        "src": "25:21:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1052,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1048,
              "src": "166:5:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$1048",
                "typeString": "contract ERC20"
              }
            },
            "id": 1053,
            "nodeType": "InheritanceSpecifier",
            "src": "166:5:8"
          }
        ],
        "contractDependencies": [
          1048,
          1336
        ],
        "contractKind": "contract",
        "documentation": "@title Burnable Token\n@dev Token that can be irreversibly burned (destroyed).",
        "fullyImplemented": true,
        "id": 1079,
        "linearizedBaseContracts": [
          1079,
          1048,
          1336
        ],
        "name": "ERC20Burnable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1064,
              "nodeType": "Block",
              "src": "331:41:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1059,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1351,
                          "src": "347:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1060,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "347:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1061,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1055,
                        "src": "359:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1058,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1005,
                      "src": "341:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1062,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "341:24:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1063,
                  "nodeType": "ExpressionStatement",
                  "src": "341:24:8"
                }
              ]
            },
            "documentation": "@dev Burns a specific amount of tokens.\n@param value The amount of token to be burned.",
            "id": 1065,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1056,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1055,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 1065,
                  "src": "309:13:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1054,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "309:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "308:15:8"
            },
            "returnParameters": {
              "id": 1057,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "331:0:8"
            },
            "scope": 1079,
            "src": "295:77:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1077,
              "nodeType": "Block",
              "src": "678:39:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1073,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1067,
                        "src": "698:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1074,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1069,
                        "src": "704:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1072,
                      "name": "_burnFrom",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1047,
                      "src": "688:9:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1075,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "688:22:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1076,
                  "nodeType": "ExpressionStatement",
                  "src": "688:22:8"
                }
              ]
            },
            "documentation": "@dev Burns a specific amount of tokens from the target address and decrements allowance\n@param from address The address which you want to send tokens from\n@param value uint256 The amount of token to be burned",
            "id": 1078,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burnFrom",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1070,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1067,
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 1078,
                  "src": "642:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1066,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "642:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1069,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 1078,
                  "src": "656:13:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1068,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "656:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "641:29:8"
            },
            "returnParameters": {
              "id": 1071,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "678:0:8"
            },
            "scope": 1079,
            "src": "624:93:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 1080,
        "src": "140:579:8"
      }
    ],
    "src": "0:720:8"
  },
  "legacyAST": {
    "absolutePath": "/D/code/enerZToken/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol",
    "exportedSymbols": {
      "ERC20Burnable": [
        1079
      ]
    },
    "id": 1080,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1050,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:23:8"
      },
      {
        "absolutePath": "/D/code/enerZToken/node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "file": "./ERC20.sol",
        "id": 1051,
        "nodeType": "ImportDirective",
        "scope": 1080,
        "sourceUnit": 1049,
        "src": "25:21:8",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 1052,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1048,
              "src": "166:5:8",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$1048",
                "typeString": "contract ERC20"
              }
            },
            "id": 1053,
            "nodeType": "InheritanceSpecifier",
            "src": "166:5:8"
          }
        ],
        "contractDependencies": [
          1048,
          1336
        ],
        "contractKind": "contract",
        "documentation": "@title Burnable Token\n@dev Token that can be irreversibly burned (destroyed).",
        "fullyImplemented": true,
        "id": 1079,
        "linearizedBaseContracts": [
          1079,
          1048,
          1336
        ],
        "name": "ERC20Burnable",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 1064,
              "nodeType": "Block",
              "src": "331:41:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1059,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1351,
                          "src": "347:3:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 1060,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "347:10:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1061,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1055,
                        "src": "359:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1058,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1005,
                      "src": "341:5:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1062,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "341:24:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1063,
                  "nodeType": "ExpressionStatement",
                  "src": "341:24:8"
                }
              ]
            },
            "documentation": "@dev Burns a specific amount of tokens.\n@param value The amount of token to be burned.",
            "id": 1065,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burn",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1056,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1055,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 1065,
                  "src": "309:13:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1054,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "309:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "308:15:8"
            },
            "returnParameters": {
              "id": 1057,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "331:0:8"
            },
            "scope": 1079,
            "src": "295:77:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 1077,
              "nodeType": "Block",
              "src": "678:39:8",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1073,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1067,
                        "src": "698:4:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1074,
                        "name": "value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1069,
                        "src": "704:5:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 1072,
                      "name": "_burnFrom",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1047,
                      "src": "688:9:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 1075,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "688:22:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 1076,
                  "nodeType": "ExpressionStatement",
                  "src": "688:22:8"
                }
              ]
            },
            "documentation": "@dev Burns a specific amount of tokens from the target address and decrements allowance\n@param from address The address which you want to send tokens from\n@param value uint256 The amount of token to be burned",
            "id": 1078,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "burnFrom",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1070,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1067,
                  "name": "from",
                  "nodeType": "VariableDeclaration",
                  "scope": 1078,
                  "src": "642:12:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1066,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "642:7:8",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 1069,
                  "name": "value",
                  "nodeType": "VariableDeclaration",
                  "scope": 1078,
                  "src": "656:13:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 1068,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "656:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "641:29:8"
            },
            "returnParameters": {
              "id": 1071,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "678:0:8"
            },
            "scope": 1079,
            "src": "624:93:8",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 1080,
        "src": "140:579:8"
      }
    ],
    "src": "0:720:8"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.0+commit.1d4f565a.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.1",
  "updatedAt": "2019-02-11T11:00:23.919Z",
  "devdoc": {
    "details": "Token that can be irreversibly burned (destroyed).",
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner allowed to a spender.",
        "params": {
          "owner": "address The address which owns the funds.",
          "spender": "address The address which will spend the funds."
        },
        "return": "A uint256 specifying the amount of tokens still available for the spender."
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "params": {
          "spender": "The address which will spend the funds.",
          "value": "The amount of tokens to be spent."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "The address to query the balance of."
        },
        "return": "An uint256 representing the amount owned by the passed address."
      },
      "burn(uint256)": {
        "details": "Burns a specific amount of tokens.",
        "params": {
          "value": "The amount of token to be burned."
        }
      },
      "burnFrom(address,uint256)": {
        "details": "Burns a specific amount of tokens from the target address and decrements allowance",
        "params": {
          "from": "address The address which you want to send tokens from",
          "value": "uint256 The amount of token to be burned"
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "spender": "The address which will spend the funds.",
          "subtractedValue": "The amount of tokens to decrease the allowance by."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed_[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "addedValue": "The amount of tokens to increase the allowance by.",
          "spender": "The address which will spend the funds."
        }
      },
      "totalSupply()": {
        "details": "Total number of tokens in existence"
      },
      "transfer(address,uint256)": {
        "details": "Transfer token for a specified address",
        "params": {
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.",
        "params": {
          "from": "address The address which you want to send tokens from",
          "to": "address The address which you want to transfer to",
          "value": "uint256 the amount of tokens to be transferred"
        }
      }
    },
    "title": "Burnable Token"
  },
  "userdoc": {
    "methods": {}
  }
}